#!/bin/bash

# bacp backup script
# --------------------

# Simple backup utility.
# Keeps a small data file of user settings
# Makes copies of selected data to defined device
# into a folder it creates named by the current date and time

# This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

# A copy of the GNU General Public License is available from the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

#
# Variables
#
declare -a LabelArray # Labels require an array as they may be several words with spaces
declare -a PathArray  # Filepaths may also have spaces
declare -a Options    # Used by listgen to display list items

#
# Functions
#

SetLanguage() { # User selects language, which is then fixed
  dialog --clear --backtitle "$_Backtitle" --title " - Language - " --menu "Choose your language" 15 40 7 \
        "English" "English" \
        "French" "Francais" \
        "Polish" "Polski" \
        "Portuguese" "Português" \
        "Romanian" "Română" \
        "Spanish" "Espanhol" \
        "Serbian" "Srpski" 2> bacp.output
    RetVal=$?
    case $RetVal in
      0) # ie: Language selected
        Language=`cat bacp.output`
        Language="${Language,,}" # Make lower case
        LanguageFile="bacp.${Language}"
        cp $LanguageFile bacp.language # Set for future use
      ;;
      *) # Catchall for <Cancel> button (1) selected (no action) or Esc
        cp bacp.english bacp.language # Set default language to English
    esac
}

Main() { # Home screen - all paths must return here
  Quit="No"
  until [ $Quit = "Yes" ]
  do
    dialog --backtitle "$_Backtitle" --title " - $_Main_Title - " --no-shadow --ok-button "$_Main_Ok" --cancel-button "$_Main_Cancel" --extra-button --extra-label "$_Main_Extra" --yesno "\n    $_Main_Text\n" 8 55 2> bacp.output
    RetVal=$?
    case $RetVal in
    0) # Ok = Run
      BackupCheckList # Display sources checklist ()
      if [ $Quit = "Yes" ]; then
        Quit="No"
      else
        Precheck # Checks that destination is ready before calling ActionBackup ()
        Quit="No"
      fi
    ;;
    3) # Extra button = Settings
        DisplaySettings # Display settings and enable change any details
        Quit="No"
     ;;
    *) # No/Cancel/Esc = Quit
       rm bacp.output # Tidy up
      BackOut
    esac
  done
}

BackOut() { # Exit
  echo -e '\0033\0143'
  exit
}

#
# Data file handling ...
#
CheckDataFile() { # First check if data file exists
  if [[ -f `pwd`/bacp.data ]]; then      # If file exists, check contents
    DataFileContents=`wc -c bacp.data | cut -c 1-2` # Count bytes
    if [ $DataFileContents -eq 0 ]; then # Empty
      rm bacp.data                       # Delete if empty
      AddDataFile                        # Then create a file
    else                                                     # Not empty
      HasDestination=`cat bacp.data | grep ${_Destination}`  # Contains keyword
      HasSlash=`cat bacp.data | grep ${_Destination}/media/` # Contains keyword and slash
      LengthHasDestination=`echo $HasDestination | wc -c | cut -c 1-3` # Get length
      LengthDestinationWord=`echo $_Destination | wc -c | cut -c 1-3`  # From language file
      LengthDifference=$((LengthHasDestination-LengthDestinationWord)) # Compare
      if [ $LengthHasDestination -eq 0 ]; then               # If no destination
        AddDataFile
      elif [ -z $HasSlash ]; then                            # Line is incomplete
        sed -i '1d' bacp.data                                # Delete corrupted line
        AddDestination                                       # Then add a new one
      fi
    fi
  else # No data file
    AddDataFile
  fi
}

AddDestination() {
  NewDataFile="No"
  Quit="No"
  until [ $Quit = "Yes" ]
  do
    SetDestinationPath # Prepare list of destination devices
    if [ ${SetPath} = "Invalid" ]; then # If backed out
      Quit="No"
    else                                # Save destination to first line
      sed -i "1i ${_Destination}${SetPath}" bacp.data
      Quit="Yes"
    fi
  done
}

AddDataFile() {
  NewDataFile="Yes"
  Quit="No"
  until [ $Quit = "Yes" ]
  do
    # Inform user
    dialog --backtitle "$_Backtitle" --title " - $_CDF_Title - " --clear --no-shadow --msgbox "$_CDF_Text.\n\n$_Quit" 12 50
    RetVal=$?
    case $RetVal in
      0) SetDestinationPath # Prepare list of destination devices
      # Create new data file and save destination
      if [ ${SetPath} = "Invalid" ]; then
        Quit="No"
      else
        echo "${_Destination}${SetPath}" > bacp.data
        AddSource # Add a source path and label
        Quit="Yes"
      fi
      ;;
      *) BackOut  # Allow for [Esc]
    esac
  done
}

#
# Settings
#
DisplaySettings() { # Display contents of settings file
  OpenDataFile  # Call function to get existing settings
  Quit="No"
  until [ $Quit = "Yes" ] # Prepare arrays for display
  do
    Options=() # Clear the array used by listgen
    Counter=0
    ItemCounter=0
    until [ $ItemCounter -gt $HowMany ]  # Match labels to paths
    do
      Options[$((Counter))]="${PathArray[${ItemCounter}]}"     # Path
      Options[$((Counter+1))]="${LabelArray[${ItemCounter}]}"  # Label
      Counter=$((Counter+2))
      ItemCounter=$((ItemCounter+1))
    done
    Counter=$((Counter/2)) # Number of records
    # Use $Counter and ${Options[@]} array in dialog
    dialog --backtitle "$_Backtitle" --title " - $_DS_Title - " --no-shadow --ok-button "$_DS_Ok" --cancel-label "$_DS_Cancel" --extra-button --extra-label "$_DS_Extra" --menu "\n$_DS_Text1 ...\n$_DS_Text2." 15 65 $Counter "${Options[@]}" 2> bacp.output
    RetVal=$?
    case $RetVal in
      0) # ie: <Ok>/<Edit> button selected - item to be edited or deleted
        SelectedPath=$(cat bacp.output)
        Counter=0
        ItemCounter=0
        until [ $ItemCounter -gt $HowMany ]  # Find record number of SelectedPath
        do
          if [ "${SelectedPath}" = "${PathArray[${ItemCounter}]}" ]; then
            break
          fi
          Counter=$((Counter+2))
          ItemCounter=$((ItemCounter+1))     # Record number (starting from 0)
        done
        SelectedLabel="${LabelArray[${ItemCounter}]}" # Matching label
        # Appropriate action dialog
        if [ $SelectedLabel = "${_Destination}" ]; then
          # Special action dialog for Destination - only allows change
          NewDataFile="No"
          EditDestination
        else # ie: This is a source
          EditOrDelete # Pass this record to decision dialog using $SelectedPath & $SelectedLabel
        fi
      ;;
      3) AddSource # ie: <Add> button selected (add a source path)
      ;;
      *) # Catchall for <Cancel> button (1) selected (no action) or Esc
        Quit="Yes"
        continue
    esac
    OpenDataFile    # Refresh the list
  done
}

OpenDataFile() { # Extract existing settings file into arrays
  CheckDataFile # Ensure that file has not been deleted
  # Called by almost all routines
  # Both the label and the filepath may contain spaces
  # But there are no spaces between the label and path
  # 1) Copy contents of the file into an array. Line consists of a label and a filepath
  HowMany=`cat -n bacp.data | awk '{print $1}' | tail -c -2` # Count number of lines
  ItemsArray=()
  Count=0
  until [ $Count -gt $HowMany ]; do
    ListCounter=$((Count+1))
    ItemsArray[${Count}]=`sed -n "$ListCounter p" bacp.data`
    Count=$((Count+1))
  done
  # 2) Separate labels and filepaths into separate arrays
  LabelArray=()
  PathArray=()
  ListofPaths="" # Prepare the string array to pass list of filepaths to listgen2
  for ((Count=0;Count<=$HowMany;++Count))
    {
    # Label
    Label=`echo ${ItemsArray[${Count}]} | cut -d / -f 1`
    LabelArray[${Count}]="$Label"
    LengthOfLabel=${#Label}
    LengthOfLabel=$(( LengthOfLabel +1 ))
    # Path
    FilePath=`echo ${ItemsArray[${Count}]} | cut -c ${LengthOfLabel}-`
    PathArray[${Count}]="$FilePath" # Save to array
    }
}

EditDestination() { # Edit existing destination
  # Build a list of available devices
  Existing=`cat bacp.data | grep ${_Destination}`
  SetDestinationPath # Prepare list of devices
  # On return of $SetPath, overwrite the existing entry in bacp.data file
  sed -i "/${_Destination}/ c\${_Destination}${SetPath}" bacp.data
}

AddSource() { ## Create a new source path
  # Start by preparing a file containing all items in local path
  UserName=`whoami`
  ls ~/ > path.output             # Save list of home directory
  StartPath="/home/$UserName/"    # Set home path
  DisplayPath="/home/$UserName/"  # And set initial path to home
  FirstLevel="Yes"                # In case dropping back from deeper search
  Quit="No"
  until [ $Quit = "Yes" ]
  do
    # Prepare array of long labels
    HowMany=`cat -n path.output | awk '{print $1}' | tail -c -3` # Count items in selected directory
    PathArray=()                                                 # Clear PathArray ready for new list
    Count=1
    until [ $Count -gt $HowMany ]
    do
      PathArray[${Count}]=`sed -n "$Count p" path.output`        # Copy each item to PathArray
      Count=$((Count+1))
    done
    # Prepare $Options array for dialog menu using PathArray
    Counter=1
    ItemCounter=1
    Width=50
    Options=()
    for item in "${PathArray[@]}"; do
      Options[$((Counter))]=${ItemCounter}
      Options[$((Counter+1))]="$item"
      Counter=$((Counter+2))
      ItemCounter=$((ItemCounter+1))
      Length=`echo ${#item}`
      if [ $Length -gt $Width ]; then
        Width=$((Length+30))
      fi
    done
    #_AS1 : Use $ItemCounter and ${Options[@]} array in menu dialog
    dialog --backtitle "$_Backtitle" --title " - $_AS1_Title - " --no-shadow --ok-button "$_AS1_Ok" --menu "$_AS1_Text1 $DisplayPath\n$_AS1_Text2.\n" 20 60 $ItemCounter "${Options[@]}" 2> bacp.output
    # Output file holds the line number of selection
    RetVal=$?
    # Act on button-press and item selected
    if [ $RetVal -gt 0 ]; then # <Cancel> selected
      if [ $FirstLevel = "Yes" ]; then
        Quit="Yes"
      else # Reset all to start position
        ls ~/ > path.output
        DisplayPath="$StartPath"
        FirstLevel="Yes"
        Quit="No"
      fi
    else # Handling of user choice for selected directory starts here
      Output=`cat bacp.output`                       # Line number of the selected item
      Selection=`sed -n "${Output} p" path.output`   # Get the selected item from file
      Path="${DisplayPath}${Selection}"
      if [[ -d ${Path} ]]; then                      # Selection is a directory
        # _AS2 : Offer option to save it as a source or open to drill down
        dialog --backtitle "$_Backtitle" --title " - $_AS2_Title - " --clear --no-shadow --ok-label "$_AS2_Ok" --extra-button --extra-label "$_AS2_Extra" --yesno "$_AS2_Text1 '$Path' $_AS2_Text2." 8 60
        RetVal=$?
        case $RetVal in
          0) SelectedPath="$Path"   # <Ok>/<Save> option selected
            Message="$_AS2_Message1\n$_AS2_Message2"
            EditLabel # Function call - enter a label - sets $SelectedLabel
            if [ -n "$SelectedLabel" ]; then
              # Save new record
              echo "$SelectedLabel$SelectedPath/" >> bacp.data
              break
            fi
          ;;
          3) # <Open> option selected - prepare file and variables for display
            echo $Path > path.output                       # Save path to file
            SearchPath=`cat path.output | sed 's/ /\\ /g'` # Format it for ls command
            ls "${SearchPath}" > path.output               # Then save listing
            DisplayPath="$Path/" # Included in message of dialog menu at line 202 in this function
            FirstLevel="No"      #
          ;;
          *) SelectedPath="$StartPath"
            FirstLevel="Yes"
         esac
      else #_AS3 : Selection is a file - save it or cancel
        dialog --backtitle "$_Backtitle" --title " - $_AS3_Title - " --clear --no-shadow --ok-label "$_AS3_Ok" --yesno "$_AS3_Text1 '$Path' $_AS3_Text2" 10 45
        RetVal=$?
        case $RetVal in
          0) SelectedPath="$Path" # <Save>
            Message="$_AS3_Message1\n$_AS3_Message2"
            EditLabel # Enter a label to $SelectedLabel
            if [ -n "$SelectedLabel" ]; then
              echo "$SelectedLabel$SelectedPath/" >> bacp.data # Save new record
              break
            fi
          ;;
          *) SelectedPath="$StartPath"
            FirstLevel="Yes"
        esac
      fi
    fi
  done
  rm path.output
}

EditOrDelete() {   # yes/no dialog with options to <Edit> or <Delete> using $SelectedPath & $SelectedLabel
  dialog --backtitle "$_Backtitle" --title " - $_AOD_Title - " --clear --no-shadow --ok-label "$_AOD_Ok" --extra-button --extra-label "$_AOD_Extra" --no-button "$_AOD_No" --yesno "$_AOD_Text1:\n  $SelectedPath\n$_AOD_Text2:\n  $SelectedLabel\n$_AOD_Text3" 10 50
  Action=$?
  case $Action in
  0) EditSource
  ;;
  3) DeleteSource
  ;;
  *) return # Cancel
  esac
}

SetDestinationPath() { # Choose whether to use an external device or a local one
  # Called by CheckDataFile and EditDestination
  UserName=`whoami`
  Quit="No"
  # Prepare numbered list in local language
  Options=()
  Options[1]="1"
  Options[2]=`echo $_DP_Listgen1 | awk '{print $1}'`
  Options[3]="2"
  Options[4]=`echo $_DP_Listgen1 | awk '{print $2}'`
  until [ $Quit = "Yes" ]
  do
    # Display short list of device options
    dialog --backtitle "$_Backtitle" --title " - $_DP_Listgen2 - " --no-shadow --ok-button "$_AS1_Ok" --cancel-label "$_AOD_No" --menu "$_DP_Message." 10 50 2 "${Options[@]}" 2> bacp.output
    RetVal=$?                  # 1 = External, 2 = Local
    if [ $RetVal -gt 0 ]; then # <Cancel>
      SetPath="Invalid"
      Quit="Yes"
      break
    else
      Selection=`cat bacp.output`      # Recover the selection from listgen output file
      case $Selection in
      2) StartPath="/home/$UserName"   # Set local startpath
      ;;
      1) StartPath="/media/$UserName"       # Set external startpath
        if [ -z `ls ${StartPath}` ]; then   # Test external startpath
          SetPath="Invalid"
          dialog --backtitle "$_Backtitle" --title " - $_TD_Title - " --clear --no-shadow --msgbox "$_TD_Text1" 8 45
          break
        fi
      ;;
      *) SetPath="Invalid" # Cannot proceed without destination
        dialog --backtitle "$_Backtitle" --title " - $_TD_Title - " --clear --no-shadow --msgbox "$_TD_Text1" 8 45
        break
      esac
    fi
    ListPaths  # Use contents of $StartPath to list available paths on either external or local device
  done
}

ListPaths() { # Display directory of chosen local or external device
  Browse=`ls $StartPath/` # Save directory listing
  until [ $Quit = "Yes" ] # When user selects one, create a new bacp.data file with device
  do
    listgen1 "$Browse" "$_LP_Listgen2" "" # Present list of all devices on chosen path
    Printit
    RetVal=$?
    if [ $RetVal -gt 0 ]; then # <Cancel>
      Quit="Yes"
      break
    else
      Picked=`cat bacp.output` # Recover the selection from listgen
      dialog --backtitle "$_Backtitle" --title " - $_LP_Title - " --clear --no-shadow --yes-button "$_LP_Yes" --no-button "$_LP_No" --extra-button --extra-label "$_LP_Extra" --yesno "$_LP_Text1 '$Picked' $_LP_Text2?" 10 45
      RetVal=$?
      case $RetVal in
      0) SetPath="${StartPath}/${Picked}/" # ie: Yes - finish with selected path
        Quit="Yes"
        ;;
      1) # Cancel button
        SetPath="Invalid"
        break
        ;;
      *) # ie: No - offer directories until done
        StartPath="${StartPath}/${Picked}/"
        Browse=`ls ${StartPath}`
      esac
    fi
  done
}

EditSource() {  # Edit the label of an existing source using $SelectedPath & $SelectedLabel
  # Called via EditOrDelete
  Message="$_ES_Message1 '$SelectedLabel'\n$_ES_Message2"
  EditLabel # Re-sets $SelectedLabel
  # Then assemble the new label with the path, and replace the record
  Replacement="$SelectedLabel$SelectedPath"
  # Get record number of selected item
  ReadRecord=`cat -n bacp.data | grep ${SelectedPath}$ | awk '{print $1}'`
  # Replace the selected record number with new one
  sed -i "$ReadRecord d" bacp.data # Delete existing record
  echo "$Replacement" >> bacp.data # Append new one
}

DeleteSource() { # Delete an existing source using $SelectedPath & $SelectedLabel
  # Called via EditOrDelete
  # Get record number of selected item
  ReadRecord=`cat -n bacp.data | grep ${SelectedPath}$ | awk '{print $1}'`
  # First confirm delete
  dialog --backtitle "$_Backtitle" --title " - $_DeleteSource_Title - " --no-shadow --yesno "$_DeleteSource_Text" 10 45
  # Then delete it
  sed -i "$ReadRecord d" bacp.data # Delete existing record
}

EditLabel() { # Form to edit an existing or new label
  # Returns $SelectedLabel if completed
  dialog --backtitle "$_Backtitle" --title " - $_EL_Title - " --no-shadow --inputbox "$Message" 10 51 2> bacp.output
  RetVal=$?
  case $RetVal in
  0) SelectedLabel=`cat bacp.output` #
  ;;
  *) SelectedLabel=""
  esac
}

#
# Listgen functions
#
listgen1() { # Prepare single-column list
  Title="$2"
  if [ $3 ]; then
    case $3 in
      "nocancel") CancelButton="--nocancel"
      ;;
      *) CancelButton="--cancel-label $3"
    esac
  else
    CancelButton=""
  fi
  Counter=0
  Options=() # Clear listgen array
  if [ ! $Width ]; then
    Width=40
  fi
  # Prepare $1 for dialog menu
  for item in $1 # Prepare string array of list items passed as $1
  do
    Counter=$((Counter+1))
    Options[${Counter}]="$item"
    Counter=$((Counter+1))
    Options[${Counter}]="-"
    Length=`echo ${#item}`
    if [ $Length -gt $Width ]; then
      Width=$((Length+20))
    fi
  done
  NoTag="--no-tag"
}

listgen2() { # Prepare dual-column list
  Title="$2"
  if [ $3 ]; then
    case $3 in
      "nocancel") CancelButton="--nocancel"
      ;;
      "add") CancelButton="--help-button --help-label Add"
      ;;
      *) CancelButton="--cancel-label $3"
    esac
  else
    CancelButton=""
  fi
  Options=() # Clear listgen array
  Counter=0
  for item in $1; do
    Items[${Counter}]=$item
    Counter=$((Counter+1))
  done
  Counter=0
  ItemCounter=0
  # Import the complex array
  name=$4[@]
  LongName=("${!name}")
  if [ ! $Width ]; then
    Width=50
  fi
  # Prepare $1 and $4 for dialog menu
  for item in "${LongName[@]}"; do
    Options[$((Counter))]="${Items[${ItemCounter}]}"
    Options[$((Counter+1))]="$item"
    Counter=$((Counter+2))
    ItemCounter=$((ItemCounter+1))
    Length=`echo ${#item}`
    if [ $Length -gt $Width ]; then
      Width=$((Length+30))
    fi
  done
  NoTag=""
}

Printit() { # Display the list prepared in listgen1 or listgen2
  Counter=$((Counter/2))
  # Calculate number of lines
  echo $Message > listgen.output
  countcharacters=`cat listgen.output | wc -c`  # Count number of characters in $Message
  countlines=$((countcharacters/Width)) # Calculate lines
  echo $Message | sed 's/[^\\]//g' > bacp.output   # Use sed to remove all except newlines
  countnewlines=`cat listgen.output | wc -c` # Count newline characters
  Height=$((countlines+countnewlines+Counter+16-Counter))
  rm listgen.output
  if [ $Height -gt 19 ]; then
    Height=19
    if [ $Width -lt 50 ]; then
      Width=$((Width+10))
    fi
  fi
  # Use $Counter and ${Options[@]} array in dialog
  dialog --backtitle "$_Backtitle" --title " $Title " --no-shadow --ok-button "Select" $CancelButton \
      --menu "$Message\n" $Height $Width $Counter "${Options[@]}" 2> bacp.output
}

#
# Operational
#
BackupCheckList() { # A dialog checklist of saved sources.
  # User can check/uncheck items before proceeding to run backup
  until [ $Quit = "Yes" ]
  do
    OpenDataFile # 1) Rebuild list of names to be sure it's up-to-date
    # Prepare for display
    local Counter=1
    LineCounter=1
    Options=() # Clear listgen array
    # Prepare Options array for dialog checklist
    while [ $LineCounter -lt $HowMany ]
    do
      if [ "${LabelArray[${LineCounter}]}" != "${_Destination}" ]; then
        Options[${Counter}]="${LabelArray[${LineCounter}]}"
        Counter=$((Counter+1))
        Options[${Counter}]=""
        Counter=$((Counter+1))
        Options[${Counter}]="on"
        Counter=$((Counter+1))
      fi
      LineCounter=$((LineCounter+1))
    done
    # User selects from checklist
    dialog --backtitle "${_Backtitle}" --title " - ${_BC_Title} - " --no-shadow --separate-output --extra-button --extra-label "${_BC_Extra}" --checklist "${_BC_Text1}.\n${_BC_Text2}" 15 61 $LineCounter "${Options[@]}" 2> bacp.output
    RetVal=$?
    case $RetVal in
    0) # Ok/Yes
      break
    ;;
    3) # Extra (Add)
      AddSource
      continue
    ;;
    *) # Cancel/Escape
      Quit="Yes"
    esac
  done
}

Precheck() { # Check that destination is switched on before starting action
  Quit="No"
  Target="No"
  until [ $Quit = "Yes" ]
  do
    TestDestination
    if [ $Target = "Yes" ]; then
      ActionBackup
      Quit="Yes"
    fi
  done
}

ActionBackup() { # Retrieve items and copy sources to destination
  HowManySelected=`cat -n bacp.output | awk '{print $1}' | tail -c -2`
  # Go through the list of selected items, checking label against $LabelArray
  # and getting record number to retrieve path from $PathArray
  Counter=1
  echo "" > bacp.error.file # Clear the error file
  until [ $Counter -gt $HowManySelected ] # Outer iteration - selections
  do
    item=`sed -n "$Counter p" bacp.output` #  Read each selected source in turn
    HowManyRecords=${#LabelArray[@]}
    Count=0
    until [ $Count -gt $HowManyRecords ] # Inner iteration - arrays
    do
      Count=$((Count+1))  # Increment before using, to ignore Destination
      if [ "${LabelArray[${Count}]}" = "$item" ]; then    # Item matches $LabelArray
        ItemPath=${PathArray[${Count}]}                   # Find same number in PathArray
        dialog --backtitle "$_Backtitle" --title " $_AB_Title " --no-shadow --infobox "$_AB_Text $ItemPath\n" 5 55; sleep 1
        # The following code is to make sure that paths containing spaces are handled correctly
          echo $ItemPath  | sed 's/ /\\ /g' > bacp.temp.file
          ItemPath=`cat bacp.temp.file`
          rm bacp.temp.file # Tidy up
        # Then proceed to copy
        cp -r $ItemPath ${DestinationPath}${Today}/ 2>> bacp.error.file
        break
      fi
    done
    Counter=$((Counter+1))
  done
  Finished=`cat bacp.error.file`
  if [ $Finished ]; then
    dialog --backtitle "$_Backtitle" --title " - $_Finished_Title - " --clear --no-shadow --msgbox "$_Finished_Text1" 8 45
  else
    dialog --backtitle "$_Backtitle" --title " - $_Finished_Title - " --clear --no-shadow --msgbox "$_Finished_Text2" 8 45
  fi
}

TestDestination() { # Checks that destination device is available
  Quit="No"
  until [ $Quit = "Yes" ]
  do
    DestinationPath=`cat bacp.data | grep Destination | awk '{print $1}' | cut -c 12-`
    Target=`ls $DestinationPath`  # Check that it is turned on
    if [ -n "$Target" ]; then # Target is turned on
      Today=`date +%Y:%m:%d:%k:%M` # Today's date and time
      Target1=`ls $DestinationPath | grep ${Today}` # Check for existing backup
      if [ -z "$Target1" ]; then  # If no existing dated directory
        mkdir ${DestinationPath}${Today}  # Make dated directory on destination device
      fi
      Target="Yes" # Set flags
      Quit="Yes"
      break        # Quit this function
    else # If target is not turned on
      while [ -z "$Target" ] # Loop while destination is not available
      do
        dialog --backtitle "$_Backtitle" --title " - $_TD_Title - " --clear --no-shadow --yesno "$_TD_Text1.\n$_TD_Text2" 10 45
        RetVal=$?
        if [ $RetVal -eq 0 ]; then  # Try again
          Target=`ls ${DestinationPath}`  # Check that it is turned on
        else
          Target=""
          Quit="Yes"
          break # Quit this function
        fi
      done
    fi
  done
}

#
# Execute
#

# Check language file
if [[ ! -f `pwd`/bacp.language ]]; then
  SetLanguage
fi
source bacp.language

CheckDataFile # First check if data file exists, and if not create it
Main # Home screen - all paths must return here
